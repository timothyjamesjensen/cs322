Tim Jensen
CS322
Assignment 2

a) do ... while loops

Implementation:

  Implementing a do while loop is slightly different
  to a standard while loop in that the body of the
  loop precedes the condition. There is at least 
  one pass through. Thus I needed to find a way to
  ensure that the body would always execute at least
  one time. The following is my Compile method.

  Code compile(Program prog, Code next) {
    Block head = prog.block();
    Code  loop = new Goto(head);
    Tmp   tmp  = new Tmp();

    head.set(body.compile(prog,
          test.compileTo(tmp,
              new Cond(tmp,
                       prog.block(body.compile(prog, loop)),
                       prog.block(next)))));

      return loop;
    }

  My code is very similar to the supplied while loop code
  with some subtle changes. In the supplied while loop 
  code, head is being set to the return value of a 
  test.compileTo method. test is an Expression and the 
  compileTo method generates code that will evaluate the
  expression before executing the given code. Instead of
  this, head is now being set by the return value of 
  body.compile. Body is a Stmt, and the compile method
  for a statement executes the given Stmt before anything
  else. This is perfect, because it ensures that the 
  body of the loop will always execute one time. The 
  right parameter of body.compile is then passed the 
  return value of test.compileTo. This is because
  once the body is executed for the first time, we can go
  ahead and proceed with the loop as normal.


Testing:
  1.
  int i = 0;
	do {
  	  i = i+1;
	} while (i < 0);
	print i;

	The purpose of this test case is to verify that the 
	body of a do while loop will run at least once no 
	matter what. In this instance, the condition of the
	do while loop will always be false, however the output
	should still print 1. As expected the output is:
    Output: 1

  2.
  int i = 0;
	do {
  	  i = i+1;
	} while (i < 1);
	print i;

	The purpose of this test is to verify that the 
	conditional of the loop takes into consideration the
	changes that the body had on the variable i during the
	first execution before any evaluation of the 
	conditional occured. The output of this test is
    Output: 1

  3.
  int i = 0;
	do {
  	  i = i+1;
	} while (i < 5);
	print i;

	This is just a generic test to ensure that the do while
	loop is functioning as a regular while loop does. The 
	output is:
    Output: 5

Additional Notes: 
  
  The implementation of the do..while loop was very straightforward
  and similar to the while loop implementation that already
  existed. It really did not require much innovation or many changes
  that didn't already exist.
  However, if I were allowed to do more tests, I would probably just
  do more basic testing to ensure that the body of the loop behaves as 
  it should, and that there are absolutely no differences between the
  execution of this, and a regular while loop. Other than that the body
  is executed once at the start no matter what.

b) the && and || operators

Implementation.

The first step towards implementing LAnd and LOr was preparing
the Expr class to be able to create new basic prog blocks. In
order to achieve this, the method definition for compileTo in 
Expr as well as all subclasses of Expr was change to this:

   compileTo(Tmp reg, Code next, Program prog);

Following this, all calls of compileTo were changed to accept
either prog or null as a parameter. Depending on the method,
you don't need to pass prog or don't have access to it. For the
'if' 'doWhile' and 'While' constructs we definately need to pass
prog, but InitVarIntro doesn't even have access to prog so we
pass null.

The following is my compileTo method for LAnd

Code compileTo(Tmp reg, Code next, Program prog) {
    Code got = new Goto(prog.block(next));

    return l.compileTo(reg,
                       new Cond(reg,
                                prog.block(r.compileTo(reg,
                                       new Cond(reg,
                                                prog.block(new Immed(reg, 1, got)),
                                                prog.block(new Immed(reg, 0, got))),
                                        prog)),
                                prog.block(new Immed(reg, 0, got))),
                                prog);

  }

The code can be somewhat hard to follow so I will do my best at explaining
the logic behind what is going on. The breakdown goes something like this:

First thing is executing l.compileTo, and passing a new Cond as the 'next'
parameter of what Code to execute. If l evaluates to false, the entire
statement evaluates to false (because its &&) and we don't need to even
consider the right hand side, we immediately jump to a piece of code that
loads false into the results register. If l evaluates to true then we 
need to test the right hand side. r.compileTo is then executed, with a
second Cond as the 'next' parameter. In this case, if r evaluates to true
we will immediately jump to a piece of code that loads true, if r instead
evaluates to false we will jump to a piece of code that loads false.

The following is my code for LOr

 Code compileTo(Tmp reg, Code next, Program prog) {
    Code got = new Goto(prog.block(next));

    return l.compileTo(reg,
                       new Cond(reg,
                                prog.block(new Immed(reg, 1, got)),
                                prog.block(r.compileTo(reg,
                                       new Cond(reg,
                                                prog.block(new Immed(reg, 1, got)),
                                                prog.block(new Immed(reg, 0, got))),
                                        prog))),
                       prog);

  }

The code for LOr is very similar to the code for LAnd, with some subtle 
differences. With LOr, we will load true if either l or r evaluates to 
true. Thus in our approach, if l evaluates to true, we can immediately 
jump to a piece of code that loads true. If l is false, we then need to
evaluate r. Depending on whether or not r is true or false we then can
immediately jump to a piece of code that loads true or false.

I found the following code from the week 2 lab solutions to be very
helpful in my solution to this task. I knew from the start that I would
need to have nested conditionals, but this code showed me what my basic 
prog blocks needed to look like.

Code got = new Goto(prog.block(next));
    return exp.compileTo(prog, reg,
           new Cond(reg, prog.block(new Immed(reg, 0, got)),
                         prog.block(new Immed(reg, 1, got))));

Testing:
  1. 
  int i = 0;
  int x = 0;
  while (x < 5) {
    if (x==2 && i==0) {
      print x;
    }
    x=x+1;
  }

  This is a simple test of &&. It tests for false positives because the
  if conditional is tested 5 times but it should only be true once. The
  output of this program is: 
    Output: 2

  2.
  int i = 0;
  int x = 0;
  while (i<5) {
    if (x==0 && i==3) {
      print(i);
    }
    i=i+1;
  }

  This test is very similar to test 1 but I thought it was important. A
  careful observer will notice that in test 1, we don't really know if
  the right hand side of the && is really doing anything. In this test,
  the left hand side is fixed, and only the right hand side is changing.
  Combined with test 1, it shows that both the right hand and left hand
  side are being evaluated for truth, and both are necessary. Output 
  is:
    Output: 3

  3.
  int i = 0;
  int x = 0;
  while (x<5 && i<5) {
    if (x==2 || i==4) {
      print(i);
    }
    x=x+1;
    i=i+1;
  }

  In this test, && and || are both utilized, but it is mainly to test ||.
  While x and i are both less than 5, the if statement conditional will
  be tested. It will be true once when x == 2 and once again when i == 4.
  The output of this program is:
    Output: 2
    Output: 4

Additional Notes:

  I think that there are many different cases for LAnd and LOr that could
  possibly be tested. If I was able to write more tests, I would write 
  many more tests that involve only the left hand side of the conditional
  to ensure that it always behaves as expected. For example, if the left
  hand side of LOr is true, it should always evaluate to true and it 
  should not even consider the right hand side. If the left hand side of 
  LAnd is false, it should always evaluate to false and not even consider
  the right hand side. There are many tests of this sort that I could 
  write to solidify that I am receiving expected behavior and results.


c) the break and continue statements

Implementation

The first steps toward implementing the break and continue statements was
adding two extra parameters to the compile method defined in the Stmt 
class and in every subclass of Stmt. I changed the compile method to look
like this:
 
compile(Program prog, Code next, Block breakTo, Code continueTo);

This created a problem because there is a two parameter compile used in
Target.java and we are not allowed to change Target.java. So at the 
suggestion of the instructor I added the following two parameter compile
method to Stmt.

Code compile(Program prog, Code next) {
    return compile(prog, next, null, null);
}

The next step was to modify every place where compile is called by 
'passing through' the two new parameters I created. I changed the majority
of calls to compile to look like this

Code compile(Program prog, Code next, Block breakTo, Code continueTo) {
  return l.compile(prog, next, breakTo, continueTo);
}

Now it was time to get started on the actual problem at hand, getting 
break and continue to work. As mentioned by the instructor, this isn't a
conceptually difficult problem, the challenge is determining the target
destination for the Goto statements. This ended up not being to difficult.
If break is called during a loop, it simply needs to Goto 'next' and if
continue is called during a loop it needs to Goto 'loop'. ALL instances
of body.compile in my While AND DoWhile constructs were changed to look 
like this:

  body.compile(prog, loop, prog.block(next), loop)

Thus breakTo becomes a code block for next and continueTo becomes a Goto
back to the testing of the loop. 

My implementation of compile for break is as follows

  Code compile(Program prog, Code next, Block breakTo, Code continueTo) {
    return new Goto(breakTo);
  }

and my implementation of compile for continue

Code compile(Program prog, Code next, Block breakTo, Code continueTo) {
    return continueTo;
  }

Both compile methods are super simple and do the same thing. They return a
Goto to where the program should be pointed next. In the case of 'Break' 
it should go to what happens immediately after the loop, in the case of
'Continue', it should go to the evaluating portion of the loop to see if
the loop should continue or not.

You may notice that breakTo and continueTo are of different types.
breakTo is a Block and not a Goto. The reason for this is that there was a
readily available Goto construct for continueTo, but not one for breakTo.
So instead of creating a new Goto inside the Compile method of While and 
DoWhile, I chose to instead pass along the Block and create the Goto 
inside of the compile method for Break.

Testing:
  1.
  int i = 0;
  while (i<5) {
    if (i==2) {
      break;
    }
    print(i);
    i=i+1;
  }
  int x = 8;
  print(x);

  This is a simple test that verifies break does indeed break out of a
  loop, and also that the rest of the program continues to execute 
  normally, showing that break jumped to the correct place. The output of
  the program is:
    Output: 0
    Output: 1
    Output: 8
  The output shows that the break statement is working as expected. The 
  loop itereates and begins to print out i as it increments. However when
  i==2, the break statement is called, jumping outside the loop. Thus the
  furthest that i is printed is when its value is 1. We know that the 
  break statement takes us to the correct location, because immediately
  after the loop a new variable x is declared and printed, and this is
  reflected in the output.

  2.
  int i = 0;
  do {
    i=i+1;
    if (i==2) {
      continue;
    }
    print(i);
  } while (i < 5);

  This test ensures that continue is working properly. It also shows that
  the new break and continue statements will work in a do while loop as
  well as a traditional while loop. This is important becauase it is easy
  to neglect one type of loop during testing. This test would work with a 
  while loop or a do while loop. The output is:
    Output: 1
    Output: 3
    Output: 4
    Output: 5
  The test shows that continue is working as expected because when i==2
  the continue statement is called, skipping the rest of the loop body and
  going to the loop conditional. 2 is never printed to output, this shows
  that when i==2 the print(i) statement is skipped because of continue.

  3.
  int i = 0;
  int x = 5;
  while (i < 2) {
    while (x < 9) {
      if (x == 7) {
        break;
      }
      print(x);
      x=x+1;
    }
    x=5;
    print(i);
    i=i+1;
  }

  This is easily the most complicated test of the group because it has
  nested loops. Its purpose is to verify that breaking out of an inner
  loop will not disrupt the function of the outer loop. The test should 
  output in order:
    Output: 5
    Output: 6
    Output: 0
    Output: 5
    Output: 6
    Output: 1
  What happens is, for every iteration of the outer loop, the inner loop is
  run, but breaks after two iterations, printing 5 and 6 but breaking once
  x == 7. After the break the outer loop continues, showing expected 
  functionality.

Additional Notes:

  Break and continue are implented to work from either a while loop of a 
  do while loop. This doubles the amount of testing that needs to be done
  because every case of break and continue needs to be tested from both
  loop constructs. If I was allowed more tests, many of the additional 
  tests would be almost copies of eachother in order to test the two types
  of loops.


d) the switch statement

Implementation

The switch statement proved to be a very difficult challenge to solve.
Unfortunately I was not able to complete its functionality in the time
allocated, so here I will write my notes and strategy towards solving it.

The first thing that needed to be done was creating a getter method in
the NumCase class in order to get the private int num from the compile
method of switch. This getter could look something like this:

	int getNum() {
    	return num;
  	}

This method gives us access to the value of each NumCase, which is vital
when we are inside the compile method, as we will soon see.

Inside the compile method, we need to loop over the elements in the array,
checking the value of each numcase in order to see if it matches the value
of the test. If the values match, we then need to execute the body of that
specific case, and then continue executing down the rest of the cases.

The following pseudo code represents the basic idea of the loop:

	for (int i=0; i<cases.length; i++) {
		if (cases[i].getNum() == test.value) {
			some way to execute all of the bodies from here down
			break;
		}
	}

I think that my basic ideas behind this are solid, I just didn't allocate
time well enough to implement them.

Testing

I wrote some tests that I would have used to test my switch statement if
I was able to get it working.
	1.
	int one   = 1;
	int two   = 2;
	switch (two) {
		case 1: print(one);
		case 2: print(two);
	}

	This is a basic switch statement that makes sure that the right case
	is found and executed without worrying about default case or
	executing all following cases. Expected Output:
		Output: 2
	2.
	int one   = 1;
	int two   = 2;
	int three = 3;
	int four  = 4;
	switch (two) {
		case 1: print(one);
		case 2: print(two);
		case 3: print(three); break;
		case 4: print(four);
	}

	This test shows off some of the more advanced features of the switch
	statement. Expected Output:
		Output: 2
		Output: 3
	This test ensures that the body's following the match will execute, 
	two is the match so 2 is printed, but 3 follows two so 3 is also 
	printed. There is also a break in case three, so the program exits
	the switch statement and 4 is not printed.
	
	3.
	int one   = 1;
	int two   = 2;
	int three = 3;
	switch(three) {
		case 1: print(one);
		case 2: print(two);
		default: print(three);
	}
	
	This test showcases that the default case should run if there is no 
	match found. Expected output:
		Output: 3
		
Additional Notes