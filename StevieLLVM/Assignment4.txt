Tim Jensen
CS322
Assignment 4

Question 1

a) Be sure to include a commented listing of below.ll with your
   answer along with evidence that it 'can be compiled, linked
   with the runtime.c library, and executed' to produce the 
   expected result. 

  The following is my below.ll file

  define void @XinitGlobals() {
		entry:
		  ret void
		}

		define void @Xmain() {
		entry:
		  ; call the below function and store the result in t0
		  %t0 = call i32 @below(i32 3, i32 4, i32 5)
		  call void @Xprint(i32 %t0)
		  ret void
		}

		; declare external runtime library functions
		declare void @Xprint(i32)

		; function definitions

		; define below as a function that returns an i32 int
		; and takes in 3 i32 ints as parameters
		; NOTE: xe is x entry
		define i32 @below(i32 %xe, i32 %y, i32 %z) {
		entry:
		  ; immediately jump to the the while loop conditional
		  br label %tst0

		; tst0 is is the left side of the &&
		tst0:
		  ; use phi to preserve SSA form
		  ; only needed for x because only x changes
		  %x = phi i32 [ %xe, %entry ], [ %xb, %body ]

		  ; if x is less than y, test the right hand side
		  ; else jump to done
		  %cmp0 = icmp slt i32 %x, %y
		  br i1 %cmp0, label %tst1, label %done

		; tst1 is the right side of the &&
		tst1:
		  ; if x is less than z, jump to the body
		  ; else jump to done
		  %cmp1 = icmp slt i32 %x, %z
		  br i1 %cmp1, label %body, label %done

		body:
		  ; set xbody to equal x + 1
		  %xb = add i32 %x, 1
		  ; jump to the while loop conditional
		  br label %tst0

		done:
		  ret i32 %x
		}


  Evidence:
  
    I compiled and executed the above LLVM code with the following
	commands

	llc-3.4 -O0 -filetype=asm -march=x86-64 below.ll
	clang -o below below.s runtime.c
	./below

	Here is a transcript of my terminal session

	jtimothy@dege:~/cs322/cs322/StevieLLVM$ llc-3.4 -O0 -filetype=asm -march=x86-64 below.ll
	jtimothy@dege:~/cs322/cs322/StevieLLVM$ clang -o below below.s runtime.c
	jtimothy@dege:~/cs322/cs322/StevieLLVM$ ./below
	output: 4

	The output I received was:

	  output: 4

	This is indeed the correct output because while the variable X
    was less than 4 AND less than 5 it would be incremented by one.
	X started out as 3, which is less than 4 AND less than 5, so the 
	body of the loop was executed and X was incremented to 4. On the
	next iteration, X was not less than 4, so X returned with a value 
	of 4 and 4 was printed.


b) You are exptected to show how the two LLVM programs differ;
   you may well find it useful to include relevant parts of the
   generated code as a way to support your answer.

  Explanation:

  There are quite a few ways the two LLVM programs differ. I will select
  a few of the biggest ways that they differ and highlight these

  * How the parameters are handled are handled

     - The generated LLVM code seems to have an extremely confusing way
       of dealing with parameters. In the entry label for the function
       the code allocates memory for each of the variables, and then
       stores a pointer to them. Every time it then wants to access the
       variables it must load the value at the address into another 
       register.

       Memory creation:

         entry:
		 %z = alloca i32
		 %y = alloca i32
		 %x = alloca i32
		 store i32 %x.param, i32* %x
		 store i32 %y.param, i32* %y
		 store i32 %z.param, i32* %z
		 
	   Using Memory:

	     %t0 = load i32* %x
	     use %to

	   Overall this seems like a confusing way to use params.

  * The amount of labels used

     - The generated LLVM code uses many more labels than my
       handwritten code. My code uses 5 labels in the below function
       and the generated code uses 8. The three extra labels come from the
       following flaws that could be eliminated with optimization. Every 
       time there is a comparison, the code breaks to another label. This
       label it breaks to takes the result of the comparison and decides
       where to jump next.

         L1:
		   br i1 %t3, label %L6, label %L2
		 L0:
		   %t1 = load i32* %x
		   %t2 = load i32* %y
		   %t3 = icmp slt i32 %t1, %t2
		   br label %L1

	   The rusult of this is creating extra labels that don't really do
	   much other than make things confusing. My handwritten LLVM code
	   decides where to jump immediately after and in the same label as 
	   the conditional.

	     tst1:
		  ; if x is less than z, jump to the body
		  ; else jump to done
		  %cmp1 = icmp slt i32 %x, %z
		  br i1 %cmp1, label %body, label %done

	   There is also one generated label that does absolutely nothing
	   other than going to another label.

	     L3:
           br label %L2

       My handwritten code does not have any 'filler' labels that do 
       nothing but point to other labels.

  * Order of the labels

     - The order of the lables in the generated code are not in the
       logical order of execution. When reading the code and trying
       to follow along with where the code will jump next, this can
       make this harder to understand. In comparison, in my handwritten 
       code the labels are placed from top to bottom in the order that 
       they are most likely to be jumped to. Granted, sometimes you need
       to jump back upwards and cascade down through the labels again, but
       the code has a much more iterative pattern that is easier to 
       understand.


c) Can we improve the code that is generated by StevieFun (part (b))
   to better match the more natural code that a human might write for
   the same problem (part (a))? As a first step, the implementation of
   the Expr class contains the following definition of a new compilation
   scheme for expressions (i.e., in class Expr) called compilecond():

  Solution:

  I began to look at this problem, but after spending some time on it, I 
  decided that I would be better of focusing on other areas of the 
  assignment and coming back to this problem if I had more time. 
  Unfortunately I did not have more time at the end of the assignment to
  come back and work on this and I didn't get it completed.
  I have however included my general thoughts on solving this portion of
  the assignment.

  The first thing needing to be dome is add method stubs for compileCond
  to the Bool, LAnd, Lt, Var, Nth, LOr, and EqEq classes. (we will only
  be filling out the stubs for Bool, LAnd, and Lt)
  Next is actually implementing these methods.

  Once the methods are implemented, the while class would need to be 
  modifed to take advantage of them. Specifically, the test.compile would
  be changed to a test.compileCond


Question 2:

  a) The length of the array is not stored in memory, so there is no way
     to determine the length of an array at runtime, and no wat to 
     implement the length operation.

  Solution:

  The solution for the length of the array not being stored at runtime, is
  to modify the compiler so that every array of type int[] stores an extra
  length field at the start of the array, and then the rest of the array
  elements are shifted up by four from the start of the array.

  The first steps towards this was modifying runtime.c in order to store
  the length field at the start of the array. I modified the XallocArray
  function to look like this.

    void* XallocArray(int num, int size) {
      // malloc memory for the array
      // add 1 to num to make room for the length field
      int* array = malloc(++num*size);

      // store the length of the array in the first slot
      // subtract 1 from num before that happens to counterbalance adding
      // 1 earlier
      *array = --num;

      return (void*)array;
    }

  As you will notice I added one to the size of the array in order to 
  make room for the length field inside the array memory.

  Now we have the length stored in the first slot of the array. Storing
  the length of the array like this however adds an additional problem
  for us. Right now the compiler thinks that we have an array of length
  11, with the length stored at index 0. That means that the Nth function
  in the compiler is not working correctly, and we need to make some 
  changes there in order to shift the rest of the array elements up.

  The following is my updated version of the compileLoc method inside of
  the Nth class in Src.java.

    Code compileLoc(final llvm.Function fn, final ValCont k) {
      return arr.compile(fn, a ->
           // "a" is a value that holds the address of the array
           idx.compile(fn, i -> {
             // "i" is a value that holds the value of the array index

             // Make a new llvm.IntVal in order to add 1 to the
             // current index. This will effectively 'shift' every
             // value in the array up by one to make room for length
             llvm.Value iv = new llvm.IntVal(1);

             // Make a new register, 'r', to hold the result of the
             // llvm.add operation between i and iv. This register
             // will hold the new value of the array index
             llvm.Reg r = fn.reg(llvm.Type.i32);


             // Make a new register, "rg", to hold the address of the
             // requested array element:
             llvm.Reg  rg = fn.reg(a.getType());

             // Make a new llvm Op in order to add 1 to the value of the
             // array index. Store the result of this add into the register
             // r.
             // Then use the llvm getelementptr instruction to calculate the
             // address of the "r"th element of the array starting at
             // address "a", save the result in register "rg", and then
             // pass "rg" as the input to the continuation "k":
             return new llvm.Op(r, new llvm.Add(llvm.Type.i32, i, iv),
                      new llvm.Op(rg, new llvm.Getelementptr(a, r),
                      k.with(rg)));
           }));
    }

  I believe the the above code is well documented with comments, but I 
  will also add some notes here to further clarify the changes I made and
  WHY I made those changes.
  The issue at hand was that all of the values in the array needed to be 
  'shifted' over by one. In other words, whenever Nth is called to access
  a specific index, the compiler needs to generate code that will access
  and value at 1 index higher. In order to do this, code needed to be 
  generated that would add 1 to the index before it retrieved a value.
  I created an llvm.IntVal containing and integer value of 1
  and an llvm.Reg in order to help me achieve this. 
  Then I created an llvm.Op. The Rhs parameter of the Op was an
  llvm.Add that added the original index plus the integer value of 1 
  together and stored the result in the register r. The next parameter
  of the Op was the code that uses the llvm getelementptr to calculate
  the address of the element in the array, however istead of using the 
  index i, it is now using the value stored in r, thus retrieving the 
  value 'shifted up one' in the array.

  Great, so now our array is storing length in the first slot and the
  rest of the array is shifted up one slot to accomodate. Now we can add
  implementation to the Length class. 
  The following are my changes to the Length class in Src.java

    Code compile(final llvm.Function fn, final ValCont k) {
      return this.compileLoc(fn, loc -> {
        // loc is the location of the address for the value we are
        // trying to access

        // create a new regsiter where we can load the value into
        llvm.Reg rg = fn.reg(loc.getType().ptsTo());

        // use the llvm.Load in order to load the value stored at
        // loc into the register "rg" and then pass "rg" as the
        // input to the continuation in "k"
        return new llvm.Op(rg, new llvm.Load(loc), k.with(rg));
      });
    }

    Code compileLoc(final llvm.Function fn, final ValCont k) {
      return arr.compile(fn, a -> {
        // "a" is a value that holds the address of the array

        // Make a new register, "rg" to hold the address of the
        // requested array element
        llvm.Reg rg = fn.reg(a.getType());

        // Use the llvm getelementptr instruction to calculate the address of the
        // index (always stored at 0), and save the result in register "rg", then
        // pass "rg" as the input to the continuation in "k"
        return new llvm.Op(rg, new llvm.Getelementptr(a, new llvm.IntVal(0)), k.with(rg));
      });
    }

  The first thing you may notice about the above code is that it looks
  very similar to the code in the Nth class. Thats because it is. Since we
  are storing the length of the array in the first slot of the array 
  memory, in order to retrieve the length we simply need to perform and
  array access call at the 0th slot and we will get the length. Thus
  the above compileLoc method is almost an exact copy of the compileLoc
  in the Nth class, with some slight changes. There is no idx in  the 
  Length class, so that is gone, and we are always calculating the address
  of the value stored at 0. Whats new here is the code in the compile 
  method. Once again I am stealing from the Nth calss, or morespecifically
  the LValue class. Nth is a sublcass of LValue, and LValue has a compile 
  method that calls the compileLoc method from Nth. I copied that pattern 
  to use here. Compile calls compileLoc, and then loads the value from the
  returned address into a register and passes that register forward for
  use in the code to come.

  Testing:
   
  I think it is not the time to show some tests used to validate that
  we have achived the expected results with these changes.

  TEST: 
    void main() {
      int[] apple = new int[10];
      print length(apple);
      apple[0] = 12;
      print apple[0];
      print length(apple);
    }

  OUTPUT:
    output: 10
    output: 12
    output: 10

  OUTPUT JUSTIFICATION:
    In the test program, an array named apple of length ten is created.
    The value of length(apple) is then printed and the output is 10. This
    shows us that the length of the array is INDEED being stored 
    successfully and that out Length class is retrieving this value
    succesffully.
    Next we access the value at index 0 and set it to 12, we then print
    this out and the output is 12.
    Now here is where we verify that all of the values in the array are
    indeed being shifted up by one. If the values are being shifted up
    by one, then index zero should actually be referring to the second
    slot in the array memory, and the length value stored in the first
    slot will remain unchanged. If however we messed up somewhere, the
    length value stored in the first slot of the array will have been 
    overwritten.
    The output when we print length(apple) is once again 10, showing us
    that we have successfully shifted over all the values in the array
    to accomodate for storing length in the first slot.


b) The storage for new arrays is allocated by using a function called
   XallocArray(), which has been implemented by a function in the (still)
   very simple runtime library, runtime.c, which in turn relies on a 
   call to the standard C library function called malloc(). However,
   the implementation of this function does not check that the value
   of the size argument is valid (in particular, it should be greater
   than or equal to zero) and it does not test the return result that
   is produced by the call to malloc to make sure that it is not null.

  Solution:

  In order to complete this portion of the assignment, I needed to 
  modify  the XallocArray function in runtime.c. I have already modified
  runtime.c once earlier when working on part a, so I will try to 
  highlight only the new changes.

  Below is my updated XallocArray function

    void* XallocArray(int num, int size) {
      // NEW CHANGE
      // verify that num is greater than 0
      // else print an error message and exit
      if (num < 0) {
        printf("Invalid array size %d", num);
        exit(1);
      }

      // malloc memory for the array
      // add 1 to num to make room for the length field
      int* array = malloc(++num*size);

      // NEW CHANGE
      // verify that the result of malloc is not null
      // if it is null, print error message and exit
      if (array == NULL) {
        printf("Out of Memory");
        exit(1);
      }

      // store the length of the array in the first slot
      // subtract 1 from num before that happens to counterbalance adding
      // 1 earlier
      *array = --num;

      return (void*)array;
    }

  These changes should be fairly straightforward. simple if statements to
  check the values. If the values are not correct, print error messages
  and exit(1);

  Testing:

  Now is the time to test the new changes to verify expected output

  TEST:
    void main() {
      int[] apple = new int[1000000000];
      print(1);
    }

  OUTPUT:
    Out of Memory

  OUTPUT JUSTIFICATION:
    In the test program we try to create an array of size 1000000000.
    malloc is unable to create enough memory for an array of this size
    so it fails and returns null. Since malloc retuns null, we get 
    'Out of Memory' as output and the program immediately exits.
    We do not get 1 in the output from the print(1) because the program
    exits before it reaches that line.

  TEST:
    void main() {
      int[] apple = new int[-1];
      print(1);
    }
  OUTPUT:
    Invalid array size -1
  OUTPUT JUSTIFICATION:
    The entered size for an array was not greater than or equal to zero.
    Thus the appropriate error message was received as output and the 
    program immediately exited with exit code 1. print(1) is never
    reached.
 
  NOTE: In order for this test program to pass syntax analysis I had
  to modify Parser.jj to accept negative integers. The tokens section
  of Parser.jj was changed to the following

    TOKEN : {
        <INTLIT    : <ZERO> | <NEG> | <POSDIGIT> (<DIGIT>)*>
	  | <#POSDIGIT : ["1"-"9"]>
	  | <#ZERO     : "0">
	  | <#DIGIT    : <ZERO> | <POSDIGIT> >
	  | <#NEG      : "-" <POSDIGIT> (<DIGIT>)*>
	  }


c) Array accesses are not check to ensure that the specified index
   is valid. For example, a program that attempts to access an array
   element a[i] should fail at runtime if the value of i is either 
   negative or greater than or equal to the length of the array. Of
   course, it is hard to handle the fully in the current implementation
   because there is no way to determine the length of an arbitrary array.

  Solution:

  The good news is that we have already updated the current implementation
  to provide a way to determine the length on an arbitrary array. 
  The bad news is that I ran out of time and was unable to get index
  validation to work correctly. However I have provided my notes and what
  I attempted in order to get this solved, as well as the testing I wrote
  in order to help me implement this.

  I initially made a checklist of things that I would need to do in order
  to accomplish index validation. It looked like this:
  (note i'm using labels to make it easier to understand the flow)

    L0:
      - access the length of the array 
      - if index < length
           jmp L1
        else
           jmp DONE
    L1:
      - if index >= 0
           jmp 
      - else
           jmp DONE   
    L2:
      - continue normally
    DONE:
      - unreachable and exit

  The above is an extremely simplified version of what my plan was.
  I ended up loading length, and creating some blocks with fn.block(code),
  but I was unable to get everything working successfully.

  Testing:

  I didn't get the implementation working correctly, but I always like to
  write tests ahead of time to help me focus on what I am doing. I have 
  included the test I wrote here.

  TEST:
    void main() {
      int[] apple = new int[10];
      apple[12] = 5;
      print(1);
    }

  OUTPUT:
    Invalid array index 12 for array of size 10

  OUTPUT JUSTIFICATION:
    The index the code is trying to access is greater than the length of
    the array.
    Thus an error is output and the code exits without continuing.


  TEST:
    void main() {
      int[] apple = new int[10];
      apple[-1] = 5;
      print(1);
    }

  OUTPUT:
    Invalid array index -1 for array of size 10

  OUTPUT JUSTIFICATION:
    The index the code is trying to access outside is less than zero.
    Thus an error is output and the code exits without continuing.

  NOTE: Once again, this test relies on the changes I made to Parser.jj to
        allow negative integers to pass static analysis.

